/**
 * –®–ê–ë–õ–û–ù –ë–ò–ë–õ–ò–û–¢–ï–ö–ò
 * –ü–æ–ª–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –¥–ª—è –≤–Ω–µ–¥—Ä–µ–Ω–∏—è –≤ –Ω–æ–≤—É—é –∫–∞—Ä—Ç—É
 * 
 * –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï:
 * 1. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ —ç—Ç–æ—Ç —Ñ–∞–π–ª –≤ HTML
 * 2. –í—ã–∑–æ–≤–∏—Ç–µ initLibraryBuilding() –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ DOM
 * 3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π –∑–æ–Ω—ã –ø–æ–¥ –Ω–æ–≤—É—é –∫–∞—Ä—Ç—É
 */

(function() {
    'use strict';
    
    // === –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ë–ò–ë–õ–ò–û–¢–ï–ö–ò ===
    const LIBRARY_CONFIG = {
        name: '–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞',
        type: 'library',
        icon: 'assets/svg/city-panel/libery.svg',
        // –ö–û–û–†–î–ò–ù–ê–¢–´ –î–õ–Ø –ù–û–í–û–ô –ö–ê–†–¢–´ - –ù–ê–°–¢–†–û–ô–¢–ï –ü–û–î –í–ê–®–£ –ö–ê–†–¢–£
        zone: {
            left: '15%',      // –ü–æ–∑–∏—Ü–∏—è —Å–ª–µ–≤–∞
            top: '25%',       // –ü–æ–∑–∏—Ü–∏—è —Å–≤–µ—Ä—Ö—É
            width: '8%',      // –®–∏—Ä–∏–Ω–∞ –∑–æ–Ω—ã
            height: '12%'     // –í—ã—Å–æ—Ç–∞ –∑–æ–Ω—ã
        },
        // –ë–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        baseIncome: 2000,
        baseUpgradeCost: 5000,
        maxWorkers: 4,
        workerBonus: 0.2 // 20% –±–æ–Ω—É—Å –∑–∞ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞
    };
    
    // === –î–ê–ù–ù–´–ï –ë–ò–ë–õ–ò–û–¢–ï–ö–ò ===
    let libraryData = {
        level: 1,
        income: LIBRARY_CONFIG.baseIncome,
        workers: 0,
        maxWorkers: LIBRARY_CONFIG.maxWorkers,
        upgradeCost: LIBRARY_CONFIG.baseUpgradeCost,
        lastCollectTime: Date.now(),
        accumulatedProfit: 0,
        isOwned: true, // –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–∞–µ—Ç—Å—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ
        purchaseCost: 0,
        name: LIBRARY_CONFIG.name
    };
    
    // === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ===
    function initLibraryBuilding() {
        console.log('üìö –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∏...');
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        loadLibraryData();
        
        // –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É—é –∑–æ–Ω—É
        createLibraryZone();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞–Ω–µ–ª—å
        initLibraryPanel();
        
        console.log('‚úÖ –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
    }
    
    // === –°–û–ó–î–ê–ù–ò–ï –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–û–ô –ó–û–ù–´ ===
    function createLibraryZone() {
        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –∑–æ–Ω—É –µ—Å–ª–∏ –µ—Å—Ç—å
        const oldZone = document.getElementById('zone-library');
        if (oldZone) {
            oldZone.remove();
        }
        
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–æ–Ω—É
        const zone = document.createElement('div');
        zone.className = 'building-zone';
        zone.id = 'zone-library';
        zone.dataset.building = 'library';
        zone.title = LIBRARY_CONFIG.name;
        zone.textContent = '4'; // –ù–æ–º–µ—Ä –∑–¥–∞–Ω–∏—è
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é
        zone.style.left = LIBRARY_CONFIG.zone.left;
        zone.style.top = LIBRARY_CONFIG.zone.top;
        zone.style.width = LIBRARY_CONFIG.zone.width;
        zone.style.height = LIBRARY_CONFIG.zone.height;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        zone.addEventListener('click', handleLibraryClick);
        zone.addEventListener('touchstart', handleLibraryTouch, { passive: true });
        zone.setAttribute('data-handlers-added', 'true');
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∫–∞—Ä—Ç—ã
        const mapContainer = document.getElementById('map-container');
        if (mapContainer) {
            mapContainer.appendChild(zone);
        }
    }
    
    // === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–ë–´–¢–ò–ô ===
    function handleLibraryClick(event) {
        event.preventDefault();
        event.stopPropagation();
        
        console.log('üìö –ö–ª–∏–∫ –ø–æ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ');
        
        // –°–∫—Ä—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –ø—Ä–∏–±—ã–ª–∏
        if (window.hideProfitIndicators) {
            window.hideProfitIndicators();
        }
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏—è
        if (window.zoomToBuilding) {
            window.zoomToBuilding('library', LIBRARY_CONFIG.name);
        } else {
            // –ï—Å–ª–∏ –∞–Ω–∏–º–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –æ—Ç–∫—Ä—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å –Ω–∞–ø—Ä—è–º—É—é
            openLibraryPanel();
        }
    }
    
    function handleLibraryTouch(event) {
        event.preventDefault();
        handleLibraryClick(event);
    }
    
    // === –ü–ê–ù–ï–õ–¨ –ë–ò–ë–õ–ò–û–¢–ï–ö–ò ===
    function openLibraryPanel() {
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –ø–∞–Ω–µ–ª—å
        if (window.closeBuildingPanel) {
            window.closeBuildingPanel();
        }
        
        // –°–æ–∑–¥–∞–µ–º –ø–∞–Ω–µ–ª—å
        const panel = createLibraryPanel();
        document.body.appendChild(panel);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
        setTimeout(() => {
            panel.classList.add('show');
        }, 10);
        
        // –°–∫—Ä—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        const mapContainer = document.getElementById('map-container');
        if (mapContainer) {
            mapContainer.style.display = 'none';
        }
    }
    
    function createLibraryPanel() {
        const panel = document.createElement('div');
        panel.className = 'building-panel';
        panel.id = 'building-panel';
        
        // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        const accumulatedProfit = calculateAccumulatedProfit();
        const playerMoney = window.getPlayerMoney ? window.getPlayerMoney() : 0;
        const canUpgrade = playerMoney >= libraryData.upgradeCost;
        const canCollect = accumulatedProfit > 0;
        const canHire = libraryData.workers < libraryData.maxWorkers && playerMoney >= 5000;
        
        // –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
        const assignedEmployee = window.getEmpByBuilding ? window.getEmpByBuilding('library') : null;
        
        panel.innerHTML = `
            <div class="building-panel-container">
                <!-- –ó–∞–≥–æ–ª–æ–≤–æ–∫ -->
                <div class="building-panel-header">
                    <div class="building-panel-title">
                        <img src="${LIBRARY_CONFIG.icon}" alt="${LIBRARY_CONFIG.name}" class="building-icon">
                        <h2>${LIBRARY_CONFIG.name}</h2>
                    </div>
                    <button class="close-btn" onclick="closeLibraryPanel()">√ó</button>
                </div>
                
                <!-- –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è -->
                <div class="building-panel-content">
                    <!-- –ö–∞—Ä—Ç–æ—á–∫–∞ –¥–æ—Ö–æ–¥–∞ -->
                    <div class="income-card">
                        <div class="card-header">
                            <h3>–î–æ—Ö–æ–¥</h3>
                            <div class="level-badge">–£—Ä–æ–≤–µ–Ω—å ${libraryData.level}</div>
                        </div>
                        
                        <div class="income-info">
                            <div class="income-amount">
                                <span class="income-value">${formatNumber(libraryData.income)}</span>
                                <span class="income-period">/—á–∞—Å</span>
                            </div>
                            
                            <div class="profit-info">
                                <div class="profit-label">–ù–∞–∫–æ–ø–ª–µ–Ω–æ:</div>
                                <div class="profit-amount">${formatNumber(accumulatedProfit)}</div>
                            </div>
                        </div>
                        
                        <!-- –ö–Ω–æ–ø–∫–∞ —Å–±–æ—Ä–∞ -->
                        <button class="collect-btn ${canCollect ? 'active' : 'disabled'}" 
                                onclick="collectLibraryIncome()" 
                                ${!canCollect ? 'disabled' : ''}>
                            <span>–°–æ–±—Ä–∞—Ç—å</span>
                            <img src="assets/svg/money-icon.svg" alt="Collect">
                        </button>
                    </div>
                    
                    <!-- –ö–∞—Ä—Ç–æ—á–∫–∞ —É–ª—É—á—à–µ–Ω–∏—è -->
                    <div class="upgrade-card">
                        <div class="card-header">
                            <h3>–£–ª—É—á—à–µ–Ω–∏–µ</h3>
                        </div>
                        
                        <div class="upgrade-info">
                            <div class="upgrade-cost">
                                <span>–°—Ç–æ–∏–º–æ—Å—Ç—å:</span>
                                <span class="cost-amount">${formatNumber(libraryData.upgradeCost)}</span>
                            </div>
                        </div>
                        
                        <button class="upgrade-btn ${canUpgrade ? 'active' : 'disabled'}" 
                                onclick="upgradeLibrary()" 
                                ${!canUpgrade ? 'disabled' : ''}>
                            <span>–£–ª—É—á—à–∏—Ç—å</span>
                            <div class="cost-display">
                                <img src="assets/svg/money-icon.svg" alt="Cost">
                                <span>${formatNumber(libraryData.upgradeCost)}</span>
                            </div>
                        </button>
                    </div>
                    
                    <!-- –ö–∞—Ä—Ç–æ—á–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ -->
                    <div class="employee-card">
                        <div class="card-header">
                            <h3>–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏</h3>
                            <div class="employee-count">${libraryData.workers}/${libraryData.maxWorkers}</div>
                        </div>
                        
                        ${assignedEmployee ? `
                            <div class="assigned-employee">
                                <img src="${assignedEmployee.img}" alt="${assignedEmployee.name}" class="employee-avatar">
                                <div class="employee-info">
                                    <div class="employee-name">${assignedEmployee.name}</div>
                                    <div class="employee-level">–£—Ä–æ–≤–µ–Ω—å ${assignedEmployee.level}</div>
                                    <div class="employee-skill">–ù–∞–≤—ã–∫: ${assignedEmployee.skill}</div>
                                </div>
                            </div>
                        ` : `
                            <div class="no-employee">
                                <div class="no-employee-text">–ù–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞</div>
                            </div>
                        `}
                        
                        <button class="employee-btn" onclick="openEmployeeAssignment('library')">
                            ${assignedEmployee ? '–°–º–µ–Ω–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞' : '–ù–∞–∑–Ω–∞—á–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞'}
                        </button>
                    </div>
                </div>
            </div>
        `;
        
        return panel;
    }
    
    // === –§–£–ù–ö–¶–ò–ò –£–ü–†–ê–í–õ–ï–ù–ò–Ø ===
    function collectLibraryIncome() {
        const accumulatedProfit = calculateAccumulatedProfit();
        
        if (accumulatedProfit > 0) {
            // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–Ω—å–≥–∏ –∫ –±–∞–ª–∞–Ω—Å—É
            if (window.setPlayerMoney && window.getPlayerMoney) {
                const currentMoney = window.getPlayerMoney();
                window.setPlayerMoney(currentMoney + accumulatedProfit);
            }
            
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—É—é –ø—Ä–∏–±—ã–ª—å
            libraryData.accumulatedProfit = 0;
            libraryData.lastCollectTime = Date.now();
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
            saveLibraryData();
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            if (window.showNotification) {
                window.showNotification(`üí∞ –ü–æ–ª—É—á–µ–Ω–æ ${formatNumber(accumulatedProfit)}`, 'success');
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞–Ω–µ–ª—å
            setTimeout(() => {
                openLibraryPanel();
            }, 100);
        } else {
            if (window.showNotification) {
                window.showNotification('‚ùå –ù–µ—Ç –¥–µ–Ω–µ–≥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è!', 'error');
            }
        }
    }
    
    function upgradeLibrary() {
        const playerMoney = window.getPlayerMoney ? window.getPlayerMoney() : 0;
        
        if (playerMoney >= libraryData.upgradeCost) {
            // –°–ø–∏—Å—ã–≤–∞–µ–º –¥–µ–Ω—å–≥–∏
            if (window.setPlayerMoney) {
                window.setPlayerMoney(playerMoney - libraryData.upgradeCost);
            }
            
            // –£–ª—É—á—à–∞–µ–º –∑–¥–∞–Ω–∏–µ
            libraryData.level++;
            libraryData.income = Math.floor(libraryData.income * 1.5);
            libraryData.upgradeCost = Math.floor(libraryData.upgradeCost * 2);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
            saveLibraryData();
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            if (window.showNotification) {
                window.showNotification(`üèóÔ∏è –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ —É–ª—É—á—à–µ–Ω–∞ –¥–æ —É—Ä–æ–≤–Ω—è ${libraryData.level}!`, 'success');
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞–Ω–µ–ª—å
            setTimeout(() => {
                openLibraryPanel();
            }, 100);
        } else {
            if (window.showNotification) {
                window.showNotification('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è!', 'error');
            }
        }
    }
    
    // === –†–ê–°–ß–ï–¢ –ü–†–ò–ë–´–õ–ò ===
    function calculateAccumulatedProfit() {
        const currentTime = Date.now();
        const timeDiff = currentTime - libraryData.lastCollectTime;
        const hoursPassed = timeDiff / (1000 * 60 * 60);
        
        // –ë–∞–∑–æ–≤—ã–π –¥–æ—Ö–æ–¥ –≤ —á–∞—Å —Å —É—á–µ—Ç–æ–º —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤
        const hourlyIncome = libraryData.income * (1 + libraryData.workers * LIBRARY_CONFIG.workerBonus);
        
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—É—é –ø—Ä–∏–±—ã–ª—å
        const newProfit = hourlyIncome * hoursPassed;
        
        return Math.floor(libraryData.accumulatedProfit + newProfit);
    }
    
    // === –°–û–•–†–ê–ù–ï–ù–ò–ï –ò –ó–ê–ì–†–£–ó–ö–ê ===
    function saveLibraryData() {
        localStorage.setItem('libraryData', JSON.stringify(libraryData));
    }
    
    function loadLibraryData() {
        const saved = localStorage.getItem('libraryData');
        if (saved) {
            const parsed = JSON.parse(saved);
            libraryData = { ...libraryData, ...parsed };
        }
    }
    
    // === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ===
    function formatNumber(num) {
        if (num >= 1000000) {
            return (num / 1000000).toFixed(1) + 'M';
        } else if (num >= 1000) {
            return (num / 1000).toFixed(1) + 'k';
        }
        return num.toString();
    }
    
    function closeLibraryPanel() {
        const panel = document.getElementById('building-panel');
        if (panel) {
            panel.classList.remove('show');
            setTimeout(() => {
                if (panel.parentNode) {
                    panel.parentNode.removeChild(panel);
                }
            }, 300);
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        const mapContainer = document.getElementById('map-container');
        if (mapContainer) {
            mapContainer.style.display = 'block';
        }
    }
    
    // === –ì–õ–û–ë–ê–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ===
    window.initLibraryBuilding = initLibraryBuilding;
    window.collectLibraryIncome = collectLibraryIncome;
    window.upgradeLibrary = upgradeLibrary;
    window.closeLibraryPanel = closeLibraryPanel;
    window.openEmployeeAssignment = function(building) {
        if (window.openAssignOverlay) {
            window.openAssignOverlay(building);
        }
    };
    
    // === –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ===
    document.addEventListener('DOMContentLoaded', function() {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫—É –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ DOM
        setTimeout(initLibraryBuilding, 100);
    });
    
})();
